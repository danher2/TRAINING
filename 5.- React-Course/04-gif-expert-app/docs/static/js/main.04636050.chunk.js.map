{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAQaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OAEI,sBAAMC,SAdY,SAACC,GACrBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAC5BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACpCN,EAAc,MASZ,SACA,uBACQO,KAAK,OACLC,MAAOT,EACPU,SAvBe,SAACP,GACxBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,+BCXlBK,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DAEXC,EAFW,iDAEmCC,UAAUH,GAF7C,+DAGOI,MAAMF,GAHb,cAGXG,EAHW,gBAIIA,EAAUC,OAJd,uBAIVC,EAJU,EAIVA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EAEvB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVzB,kBAgBXM,GAhBW,4CAAD,sDCFPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,sBAAKc,UAAY,6CAAjB,UACG,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,QCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAIrB,ECLwB,SAACA,GAGzB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA+BA,OAzBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAIFC,YAAW,WACPJ,EAAS,CAELf,KAAMkB,EACNL,SAAS,MAEd,WAQZ,CAACpB,IAKGqB,ED7BqBM,CAAa3B,GAA7ByB,EAAZ,EAAOlB,KAAUa,EAAjB,EAAiBA,QAOrB,OACI,qCACI,qBAAIJ,UAAY,oCAAhB,cAAuDhB,EAAvD,OACCoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAGZ,qBAAKA,UAAU,YAAf,SAGQS,EAAKhB,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAESA,GADCA,EAAIC,aEvBrBiB,EAAe,WAIxB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAUA,OACA,qCACA,8CACA,cAAC,EAAD,CAAcA,cAAiBA,IAC3B,uBAEE,6BAEM8C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAYA,GADLA,YCvB3B8B,IAASC,OAAO,cAAC,EAAD,IAEdC,SAASC,eAAe,W","file":"static/js/main.04636050.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //estado inicial del input\r\n    const [inputValue, setInputValue] = useState('');\r\n   \r\n    const handledInputChange = (e)=>{\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    } \r\n\r\n    const handledSubmit = (e)=>{\r\n      e.preventDefault(); // quita el refresh del submit, ya no se hace eso\r\n      \r\n      if(inputValue.trim().length>2){\r\n      setCategories(cats=>[inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n      // console.log(\"Submit hecho!!!\");\r\n      \r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <form onSubmit = {handledSubmit}>\r\n        <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handledInputChange}\r\n           \r\n           />\r\n\r\n        </form>\r\n       \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n  }\r\n","\r\n\r\n\r\n\r\nexport const getGifs=async(category)=>{\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=RoszfEHy7uvz1ucZchUtBgZbIocCRW5F`;\r\n    const respuesta = await fetch(url); // hace la peticion\r\n    const {data} = await respuesta.json();// extrae el json del objeto respuesta\r\n    const gifs = data.map(img=>{ //img representa cada uno de los elementos en el arreglo data\r\n\r\n        return({\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        })\r\n\r\n    } )\r\n\r\n   return gifs;   // esto me devuelve la coleccion de imagenes\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    // console.log(id,title,url);\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__rubberBand\">\r\n           <img src = {url} alt = {title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setimages] = useState([]);\r\n    \r\n    const {data:imgs,loading} = useFetchGifs(category);\r\n    \r\n    \r\n   \r\n    \r\n\r\n   \r\nreturn (\r\n    <>\r\n        <h3 className  ='animate__animated animate__bounce'> { category } </h3>\r\n        {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n     \r\n\r\n        <div className=\"card-grid\">\r\n            \r\n            {\r\n                imgs.map( img => (\r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                    />\r\n                ))\r\n            }\r\n        \r\n        </div>\r\n    </>\r\n)\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n\r\n\r\n                setTimeout(() => {\r\n                    setstate({\r\n\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 1500\r\n\r\n                );\r\n\r\n            });\r\n\r\n\r\n\r\n    }, [category]) //si cambia la categoria lo vuelva a refrescar\r\n\r\n\r\n\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = ()=>{\r\n\r\n\r\n    // const categories = ['One Punch ','Samurai ','Dragon Ball '];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n\r\n    // const handleAdd=()=>{\r\n\r\n    //     // setCategories([...categories, 'HunterHunter']);\r\n    //     setCategories(cats=>[...cats, 'Hunter']);\r\n    //       }\r\n\r\n\r\n    return(\r\n    <>\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory  setCategories = {setCategories}/>\r\n        <hr/>\r\n            {/* Motrar la lista categorias  */}\r\n          <ol>\r\n              {\r\n                categories.map(category=>(\r\n                    <GifGrid \r\n                    key = {category}\r\n                    category = {category}/>\r\n                ))\r\n            }\r\n           </ol>\r\n    </>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}